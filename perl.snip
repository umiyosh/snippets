snippet perl
  #!/usr/bin/env perl

  use strict;
  use warnings;
  ${1:#code}

snippet strictwarnings
  use strict;
  use warnings;

snippet sub
  sub ${1:function_name} {
    ${2:# body...}
  }

snippet if
  if (${1}) {
    ${2:# body...}
  }

snippet ife
  if (${1}) {
    ${2:# body...}
  } else {
    ${3:# else...}
  }

snippet ifee
  if (${1}) {
    ${2:# body...}
  } elsif (${3}) {
    ${4:# elsif...}
  } else {
    ${5:# else...}
  }

snippet xif
  ${1:expression} if ${2:condition};

snippet while
abbr wh
  while (${1}) {
    ${2:# body...}
  }

snippet xwhile
abbr xwh
  ${1:expression} while ${2:condition};

snippet for
  for (my $${1:var} = 0; $function_name < ${2:expression}; $function_name++) {
    ${3:# body...}
  }

snippet fore
  for ${2} (${1:expression}){
    ${3:# body...}
  }

snippet xfor
  ${1:expression} for @${2:array};

snippet unless
abbr un
  unless (${1}) {
    ${2:# body...}
  }

snippet une
abbr une
  unless (${1}) {
    ${2:# body...}
  } else {
    ${3:# body...}
  }

snippet xunless
abbr xun
  ${1:expression} unless ${2:condition};

snippet eval
  eval {
    ${1:# do something risky...}
  };
  if ($@) {
    ${2:# handle failure...}
  }

#originals
snippet chomp
  unless ($eol) { ($/) = ($eol) = /(\x0d?\x0a|\x0d)$/; }; chomp;

snippet     ddump
abbr        ddu
prev_word   '^'
  print Dumper ${1:#valiable};


# Package
snippet cl
  package ${1:ClassName};

  use base qw(${2:ParentClass});

  sub new {
    my $class = shift;
    $class = ref $class || $class;
    my $self = bless {}, $class;
    $self;
  }

  1;${3}

# Read File
snippet slurp
  my $${1:var};
  { local $/ = undef; local *FILE; open FILE, "<${2:file}"; $function_name = <FILE>; close FILE }${3}

# add snippets from http://blog.dealforest.net/2009/04/migrate-over-to-snipmate-from-snippetseeu/
snippet dump
  use Data::Dumper;
  ${1}

snippet loc
  use FindBin;
  use local::lib "$FindBin::Bin/../extlib/";

snippet say
  print ${1:$var}, "\n";
  ${2}
snippet self
  my $self = shift;
  ${1}
snippet data
  my $data = do {
    local $/;
    <data>
  };
  ${1}
snippet argf
  while ${2:record} (<${1:filehandle}>) {
    unless ($eol) { ($/) = ($eol) = /(\x0d?\x0a|\x0d)$/; }; chomp ${3:record};
    ${4}
  }
  ${5}
snippet isa
  if (blessed ${1:$var} and ${2:$var}->isa('${3:Class}')) {
    ${4}
  }
  ${5}
snippet readcsv
  use IO::File;
  use Text::CSV_XS;

  my $fh = IO::File->new('${1:filename}') or die 'cannot open file.';
  my $csv = Text::CSV_XS->new({ sep_char => "\t", binary => 1 });
  until ($fh->eof) {
    my $cols = $csv->getline($fh);
    unless ($cols) {
      warn $csv->error_diag;
      next;
    }
    my (${2}) = @$cols;
  }
  $fh->close;
  ${3}

#class-C3
snippet next
  $self->next::method(@_);
  ${1}
snippet maybe
  $self->maybe::next::method(@_);
  ${1}

#Catalyst
snippet debug
  $c->log->debug('${1:[ debug ]}: '. ${2:$var});
  ${3}
snippet warn
  $c->log->warn('${1:[ warn ]}: '. ${2:$var});
  ${3}
snippet dumper
  $c->log->dumper('${1:[ dumper ]}: '. ${2:$var});
  ${3}
snippet model
  $c->model('${1:model}')
  ${2}
snippet view
  $c->view('${1:view}')
  ${2}
snippet template
  $c->view('View::TT')->template('${1:name}');
  ${2}
snippet config
  $c->config->{${1:name}}
  ${2}
snippet controller
  sub ${1:func} : ${2:Attribute} {
    my ($self, $c) = @_;
    ${3}
  }
  ${4}
snippet begin
  sub begin : Private {
    my ($self, $c) = @_;
    ${1}
    1;
  }
  ${2}
snippet auto
  sub auto : Private {
    my ($self, $c) = @_;
    ${1}
    1;
  }
  ${2}
snippet detach
  $c->detach('${1:name}');
  ${2}
snippet forward
  $c->forward('${1:name}');
  ${2}
snippet stash
  $c->stash->{${1:var}}${2}
snippet flash
  $c->flash->{${1:var}}${2}
snippet session
  $c->session->{${1:var}}${2}
snippet sstash
  $c->stash->{${1:var}} = ${2};
  ${3}
snippet sflash
  $c->flash->{${1:var}} = ${2};
  ${3}
snippet ssession
  $c->session->{${1:var}} = ${2};
  ${3}
snippet rs
  $c->model('DBIC::${1:Source}')
  ${2}
snippet redirect
  $c->res->redirect($c->uri_for('${1:uri}'));
  ${2}
snippet param
  $c->req->param('${1:param}')
  ${2}

snippet encode
  ${4:scalar} = encode('${3:utput encoding}', decode('${2:input encoding}', ${1:scalar}));

snippet io
    ${1:scalar} = IO::File->new( "${2:read/write} " . "${3:filepath}") or die "${4:message}";
    ${5}

snippet header
  ###############################################################################
  # 名      称 ：${0:name}
  # 機      能 ：${1:function}
  # 備      考 ：${2:remarks}
  # 制      限 ：${3:restrictions}
  # TODO       ：${4:TODO}
  # 作成年月日 ：${5:date}
  ###############################################################################

snippet     getopt
    use Getopt::Compact;
snippet  getoptc
  my $opts = Getopt::Compact->new(
    name    => "$0",
    modes   => [qw(verbose debug)],
    version => $VERSION,
    struct  => [
      [ [qw(${1:c command})]     , qq(${2: usage}) , '=s' ] ,
    ]
  );
  my $options = $opts->opts;
  for my $option ( keys %{$options} ) {
    unless ( $option =~ /verbose|debug|help|man|${3:ommit option}/ ) {
      unless ( exists $options->{$option} and defined $options->{$option}) {
        print "option:$option must be specify\n";
        print $opts->usage();
        die;
      }
    }
  }

#originals
snippet op
  open (my ${1:filehandle} ,"${2:read/write}" , ${3:filepath}) or die "open error ${4:message} :$!\n";

snippet csv
  use Text::CSV_XS;
  use Text::CSV::Simple;
  sub make_csv_hash {
    my $filename = shift @_;
    my ($head);
    my $tc = Text::CSV_XS->new({binary => 1, eol => "\r\n", always_quote => 1});
    my $csv_parser = Text::CSV::Simple->new({
      binary => 1, #日本語を通すため
    });
    open TS ,"< $filename" or die "csvrec open error";
    $head=<TS>;
    $tc->parse($head);
    my @header_fields = $tc->fields;
    close TS;
    $csv_parser->field_map(@header_fields);
    my @csvrec_list = $csv_parser->read_file("$filename");
    shift @csvrec_list;
    return \@csvrec_list,\@header_fields;
  }
  my ($${2:recbody}_csvrec,$${3:rechead}_header) = make_csv_hash(${1:csv.csv});

snippet csvxs
  use Text::CSV_XS;
  sub parse_csv {
    my $filename = shift @_;
    my (@fields);
    my $tc =
      Text::CSV_XS->new( { binary => 1, eol => "\r\n", always_quote => 1 } );
    open( my $csvhandle, "<", $filename )
      or die "csv open error $filename :$!\n";
    while (<$csvhandle>) {
      unless ( my $eol ) { ($/) = ($eol) = /(\x0d?\x0a|\x0d)$/; }
      chomp;
      $tc->parse($_);
      push @fields, [ $tc->fields ];
    }
    close $csvhandle;
    return @fields;
  }
  my @csvrec = parse_csv(${1:csvfilename});

snippet new
  sub new {
    my $class = shift;
    $class = ref $class || $class;
    my $self = bless {}, $class;
    $self;
  }

snippet trueth-value
  use constant TRUE  => 1;
  use constant FALSE => 0;

snippet constant
  use constant ${1:CONSTANTNAME}  => ${2:CONSTANTVALUE};

snippet suniq
    sub suniq {
    my %tmp;
    my @return;
    foreach (@_){
      $tmp{$_}++;
    }
    @return = sort (keys %tmp);
    return @return;
  }

snippet     ymd2epoch
abbr        ymd
prev_word   '^'
  sub ymd2epoch {
    my $ymd = shift;
    my $hms = shift;
    my $epoch_sec;
    if ( ( !defined $ymd ) && ( !defined $hms ) ) {
      return undef;
    }
    if ( !( $ymd =~ /^\d\d\/\d\d\/\d\d/ && $hms =~ /^\d\d:\d\d:\d\d/ ) ) {
      my @split_YMD = split /\//, $ymd;
      my @split_HMS = split /:/,  $hms;
      $epoch_sec = timelocal(
        $split_HMS[2], $split_HMS[1],     $split_HMS[0],
        $split_YMD[2], $split_YMD[1] - 1, $split_YMD[0]
      );
    }
    else {
      return undef;
    }
    return $epoch_sec;
  }


snippet     absolute_path
  sub absolute_path {
    use Path::Extended;
    my $path            = shift;
    my $pathobj         = Path::Extended::file($path);
    $path               = $pathobj->absolute();
  }

snippet     list_basename
  sub list_basename {
    my @pathlist = @_;
    for my $path (@pathlist){
      push @basename_list,basename($path);
    }
    return @basename_list;
  }

snippet u
  #!/usr/bin/env perl
  use 5.10.0;
  use strict;
  use warnings;

snippet d
  use Data::Dump qw(dump);
  warn dump

snippet dd
  use Data::Dumper;
  local $Data::Dumper::Indent = 1;
  local $Data::Dumper::Terse  = 1;
  warn Dumper

snippet dds
  use Data::Dump::Streamer qw(Dumper);
  warn Dumper

snippet c
  use Carp qw/croak/;

snippet n
  sub ${1:fnc} {
    my $class = shift;
    my $args  = ref $_[0] ? $_[0] : +{@_};
    ${2:code}
    bless $args, $class;
  }

snippet l
  use Class::Accessor::Lite

snippet ll
  Clas::Accessor::Lite->mk_accessors(${1:accessors});

snippet t
  #!/usr/bin/env perl -w
  use strict;
  use Test::More;
  subtest => sub {
  };
  done_testing;

snippet s
  my ($self) = @_;

snippet ex
  use parent qw(Exporter);
  our @EXPORT_OK = qw();

snippet plack
  use Plack::Request;
  sub {
    my $req = Plack::Request->new($_[0]);
    given ($req->path) {
      when ('/') {
        $req->param('');
        return [200, ["Content-Type" => "text/html"], ['200 OK']];
      }
    }
    return [404, ["Content-Type" => "text/plain"], ['404 Not Found']];
  };

snippet file
  use Path::Class qw(file);
  my @lines = file(__FILE__)->dir->file('/path/to/file')->slurp;

snippet r200
  [ 200, ['Content-Type', 'text/plain'], ['200 OK'] ]

snippet r404
  [ 404, ['Content-Type', 'text/plain'], ['404 Not Found'] ]

#moose
snippet moose
  use Moose;
  use namespace::autoclean;
  ${1:#}BEGIN {extends '${2:ParentClass}'};
  ${3}

# Moose has
snippet has
  has ${1:attribute} => (
    is      => '${2:ro|rw}',
    isa   => '${3:Str|Int|HashRef|ArrayRef|etc}',
    default => sub {
      ${4:defaultvalue}
    },
    ${5:# other attributes}
  );

# override
snippet override
  override ${1:attribute} => sub {
    ${2:# my $self = shift;};
    ${3:# my ($self, $args) = @_;};
  };

# Begin block
snippet begin_block
  BEGIN {
    ${1:# begin body}
  }

# call package function with some parameter
snippet pkgmv
  __PACKAGE__->${1:package_method}(${2:var})

# call package function without a parameter
snippet pkgm
  __PACKAGE__->${1:package_method}()

# call package "get_" function without a parameter
snippet pkget
  __PACKAGE__->get_${1:package_method}()

# call package function with a parameter
snippet pkgetv
  __PACKAGE__->get_${1:package_method}(${2:var})

# complex regex
snippet qrx
  qr/
       ${1:regex}
  /xms

#simpler regex
snippet qr/
  qr/${1:regex}/x

#given
snippet given
  given ($${1:var}) {
    ${2:# cases}
    ${3:# default}
  }

# switch-like case
snippet when
  when (${1:case}) {
    ${2:# body}
  }

# map
snippet map
  map {  ${2: body }    }  ${1: @array } ;

# Pod stub
snippet ppod
  =head1 NAME

  ${1:ClassName} - ${2:ShortDesc}

  =head1 SYNOPSIS

    use $1;

    ${3:# synopsis...}

  =head1 DESCRIPTION

  ${4:# longer description...}


  =head1 INTERFACE


  =head1 DEPENDENCIES


  =head1 SEE ALSO

# use test classes
snippet tuse
  use Test::More;
  use Test::Deep; # (); # uncomment to stop prototype errors
  use Test::Exception;

# local test lib
snippet tlib
  use lib qw{ ./t/lib };

