
snippet function
abbr function () {}
  ${1:public }function ${2:FunctionName}(${3})
  {
    ${4:// code...}
  }

snippet php
  <?php
  ${1}
  ?>

snippet pecho
  <?php echo ${1} ?>${0}

snippet echoh
  <?php echo htmlentities(${1}, ENT_QUOTES, 'utf-8') ?>${0}

snippet echo
  echo "${1:string}"${0};

snippet pfore
  <?$php foreach ($${1:variable} as $${2:key} ${3: =>}): ?>
  ${0}
  <?php endforeach ?>

snippet pife
  <?php if (${1:condition}): ?>
  ${2}
  <?php else: ?>
  ${0}
  <?php endif ?>

snippet pif
  <?php if (${1:condition}): ?>
  ${0}
  <?php endif ?>

snippet pelse
  <?php else: ?>

snippet this
  <?php $this->${0} ?>

snippet th
  $this->${0}

snippet ethis
  <?php echo $this->${0} ?>

snippet namespace
  namespace ${1:Foo\Bar\Baz};
  ${2}

snippet namespace_class
  namespace ${1:`substitute(substitute(expand("%:h"), '\v^\w+\/(\u)', '\1', ''), '\/', '\\\', 'g')`};

  ${2:abstract }class ${3:`Filename()`}
  {
    ${4}
  }

snippet use
  use ${1:Foo\Bar\Baz};
  ${2}

snippet docc
  /**
   * ${3:undocumented class variable}
   *
   * @var ${4:string}
   **/
  ${1:var} $${2};${0}

snippet docd
  /**
   * ${3:undocumented constant}
   **/
  define(${1} ${2});${0}

snippet docs
  /**
   * ${4:undocumented function}
   *
   * @param  ${5:void}
   * @return ${6:void}
   * @author ${7}
   **/
  ${1}function ${2}(${3});${0}

snippet docf
  /**
   * ${4:undocumented function}
   *
   * @param  ${5:void}
   * @return ${6:void}
   * @author ${7}
   **/
  ${1}function ${2}(${3})
  {
    ${0}
  }

snippet doch
  /**
   * ${1}
   *
   * @author ${2}
   * @version ${3}
   * @copyright ${4}
   * @package ${5:default}
   **/

  /**
   * Define DocBlock
   **/

snippet doci
  /**
   * ${2:undocumented class}
   *
   * @package ${3:default}
   * @author ${4}
   **/
  interface ${1}
  {
    ${0}
  } // END interface ${1}

snippet comment
  /**
   * $0
   */

snippet class
  /**
   * ${1}
   */
  class ${2:ClassName} ${3:extends}}
  {
    $5
    function ${4:__construct}(${5:argument})
    {
      ${0:# code...}
    }
  }

# define(...)
snippet define
  ${1}define('${1}', '${2}')${0}

# defined(...)
snippet defined
  ${1}defined('${2}')${3}

snippet do
  do {
    ${0:# code...}
  } while (${1});

snippet if?
  $${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b} ;

snippet ife
  if (${1:condition}) {
    ${2:# code...}
  } else {
    ${3:# code...}
  }
  ${4}

snippet ifee
  if (${1:condition}) {
    ${2:# code...}
 } elseif (${3:condition}) {
    ${4:# code...}
  } else {
    ${5:# code...}
  }
  ${6}

snippet if
  if (${1:condition}) {
    ${2:# code...}
  }

snippet else
  else {
    ${0:# code...}
  }

snippet elseif
  elseif (${1:condition}) {
    ${0:# code...}
  }

snippet for
  for ($${1:i}=${2:0}; $${1:i} < ${3}; $${1:i}++) {
    ${0:# code...}
  }

snippet foreach
  foreach ($${1:variable} as $${2:value}) {
    ${3:// code...}
  }

snippet foreachk
  foreach ($${1:variable} as $${2:key} => $${3:value}) {
    ${4:// code...}
  }

snippet con
  function __construct(${1})
  {
    ${0}
  }

snippet here
  <<<${1:HTML}
  ${2:content here}
  $1;

snippet inc
  include '${1:file}';${0}

snippet inco
  include_once '${1:file}';${0}

snippet array
  $${1:arrayName} = array('${2}' => ${3} ${0});

snippet req
  require '${1:file}';${0}

snippet reqo
  require_once '${1:file}';${0}

snippet ret
  return${1};${0}

snippet retf
  return false;

snippet rett
  return true;

snippet case
  case '${1:variable}':
    ${0:# code...}
    break;

snippet switch
abbr sw
  switch (${1:variable}) {
  case '${2:value}':
    ${3:# code...}
    break;
  ${0}
  default:
    ${4:# code...}
    break;
  }

snippet throw
  throw new ${1}Exception(${2:"${3:Error Processing Request}"} ${4:});
  ${0}

snippet try
  try {
    ${2}
  } catch (${1:Exception} $e) {
  }

snippet while
abbr wh
  while (${1}) {
    ${0:# code...}
  }

snippet gloabals
  \$GLOBALS['${1:variable}']${2: = } ${3:something} ${4:;} ${0}

snippet cookie
  \$_COOKIE['${1:variable}']

snippet env
  \$_ENV['${1:variable}']

snippet files
  \$_FILES['${1:variable}']

snippet get
  \$_GET['${1:variable}']

snippet post
  \$_POST['${1:variable}']

snippet request
  \$_REQUEST['${1:variable}']

snippet server
  \$_SERVER['${1:variable}']

snippet session
  \$_SESSION['${1:variable}']

# lambda with closure
snippet lambda
  ${1:static }function (${2:args}) use (${3:&$x, $y /*put vars in scope (closure) */}) {
    ${4}
  };

# pre_dump();
snippet pd
  echo '<pre>'; var_dump(${1}); echo '</pre>';

# pre_dump(); die();
snippet pdd
  echo '<pre>'; var_dump(${1}); echo '</pre>'; die(${2:});

snippet var_dump
  var_dump(${1});

snippet var_dump_die
  var_dump(${1}); die(${2:});

snippet http_redirect
  header ("HTTP/1.1 301 Moved Permanently");
  header ("Location: ".URL);
  exit();

snippet am
  $${1:foo} = array_map(function($${2:v}) {
    ${3}
    return $$2;
  }, $$1);

snippet aw
  array_walk($${1:foo}, function(&$${2:v}, $${3:k}) {
    $$2 = ${4};
  });

